[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "rag-faiss"
version = "0.1.0"
description = "RAG with LangChain + FAISS (IVF), plus a Streamlit demo."
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Tim S." }]
requires-python = ">=3.10,<3.15"
keywords = ["RAG", "LangChain", "FAISS", "IVF", "LLM", "Streamlit"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Developers",
  "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[tool.poetry]
name = "rag-faiss"
version = "0.1.0"
description = "RAG with LangChain + FAISS (IVF), plus a Streamlit demo."
authors = ["Tim S."]
readme = "README.md"
package-mode = false  # NOT a package, just want poetry dependency management

[tool.poetry.dependencies]
python = ">=3.10,<3.15"

# --- Core LangChain stack ---
langchain = ">=0.2,<0.4"
langchain-community = ">=0.2,<0.4"
langchain-text-splitters = ">=0.2,<0.4"

# FAISS (CPU build). Keep flexible so wheels resolve on your platform.
faiss-cpu = "*"
# If you want CUDA later, install the matching build instead:
# faiss-gpu = { version = "*", optional = true }

# Embeddings / HF ecosystem
transformers = { version = ">=4.41,<5", optional = true }
accelerate = { version = ">=0.28,<1.0", optional = true }
sentence-transformers = "*"
datasets = "*"

# Optional for quantized inference (saves VRAM); platform-dependent wheels
bitsandbytes = "*"

# Web demo
streamlit = ">=1.30,<2.0"

# Utilities
numpy = ">=1.24,<3.0"
pydantic = ">=2.5,<3.0"
httpx = ">=0.24,<1.0"
scikit-learn = ">=1.3,<2.0"

# Optional: local GGUF via llama.cpp bindings
llama-cpp-python = { version = ">=0.2.80,<0.3", optional = true }

[tool.poetry.extras]
# Enable Hugging Face pipelines
hf = ["transformers", "accelerate", "datasets", "sentence-transformers"]
# Enable CUDA FAISS instead of CPU (install only if you know your CUDA matches)
gpu = ["faiss-gpu"]
# Enable local GGUF inference
llamacpp = ["llama-cpp-python"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
ruff = "^0.5.0"
black = "^24.3.0"
pytest-cov = "^5.0.0"
mypy = "^1.10.0"
types-requests = "^2.32.0.20240904"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
lint.select = ["E", "F", "I", "UP", "B"]
lint.ignore = ["E501"]
exclude = ["dist", ".venv", "venv", "build"]

[tool.pytest.ini_options]
addopts = "-q --strict-markers --disable-warnings"
testpaths = ["tests"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_unused_configs = true
check_untyped_defs = true
ignore_missing_imports = true
